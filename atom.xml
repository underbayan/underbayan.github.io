<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>underbayan.blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://underbayan.github.io/"/>
  <updated>2016-08-11T07:45:53.000Z</updated>
  <id>https://underbayan.github.io/</id>
  
  <author>
    <name>underbayan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SVG+REACT to make amazing dashboard by hfsun</title>
    <link href="https://underbayan.github.io/2016/08/11/SVG-REACT-to-make-amazing-dashboard-by-hfsun/"/>
    <id>https://underbayan.github.io/2016/08/11/SVG-REACT-to-make-amazing-dashboard-by-hfsun/</id>
    <published>2016-08-11T06:13:20.000Z</published>
    <updated>2016-08-11T07:45:53.000Z</updated>
    
    <content type="html"><![CDATA[<iframe src="./galleryhtml" width="800" height="800" frameborder="0" allowfullscreen></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;iframe src=&quot;./galleryhtml&quot; width=&quot;800&quot; height=&quot;800&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>polar coodinates uvs mapping of ThreeJs SphereBufferGeometry</title>
    <link href="https://underbayan.github.io/2016/08/11/ThreeJs-SphereBufferGeometry-using-polar-coodinates-uvs-mapping/"/>
    <id>https://underbayan.github.io/2016/08/11/ThreeJs-SphereBufferGeometry-using-polar-coodinates-uvs-mapping/</id>
    <published>2016-08-11T05:24:40.000Z</published>
    <updated>2016-08-11T06:10:39.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">THREE.SphereBufferGeometry = <span class="function"><span class="keyword">function</span> (<span class="params"> radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength </span>) </span>&#123;</div><div class="line"></div><div class="line">	THREE.BufferGeometry.call( <span class="keyword">this</span> );</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.type = <span class="string">'SphereBufferGeometry'</span>;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.parameters = &#123;</div><div class="line">		radius: radius,</div><div class="line">		widthSegments: widthSegments,</div><div class="line">		heightSegments: heightSegments,</div><div class="line">		phiStart: phiStart,</div><div class="line">		phiLength: phiLength,</div><div class="line">		thetaStart: thetaStart,</div><div class="line">		thetaLength: thetaLength</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	radius = radius || <span class="number">50</span>;</div><div class="line"></div><div class="line">	widthSegments = <span class="built_in">Math</span>.max( <span class="number">3</span>, <span class="built_in">Math</span>.floor( widthSegments ) || <span class="number">8</span> );</div><div class="line">	heightSegments = <span class="built_in">Math</span>.max( <span class="number">2</span>, <span class="built_in">Math</span>.floor( heightSegments ) || <span class="number">6</span> );</div><div class="line"></div><div class="line">	phiStart = phiStart !== <span class="literal">undefined</span> ? phiStart : <span class="number">0</span>;</div><div class="line">	phiLength = phiLength !== <span class="literal">undefined</span> ? phiLength : <span class="built_in">Math</span>.PI * <span class="number">2</span>;</div><div class="line"></div><div class="line">	thetaStart = thetaStart !== <span class="literal">undefined</span> ? thetaStart : <span class="number">0</span>;</div><div class="line">	thetaLength = thetaLength !== <span class="literal">undefined</span> ? thetaLength : <span class="built_in">Math</span>.PI;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> thetaEnd = thetaStart + thetaLength;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> vertexCount = ( ( widthSegments + <span class="number">1</span> ) * ( heightSegments + <span class="number">1</span> ) );</div><div class="line"></div><div class="line">	<span class="keyword">var</span> positions = <span class="keyword">new</span> THREE.BufferAttribute( <span class="keyword">new</span> <span class="built_in">Float32Array</span>( vertexCount * <span class="number">3</span> ), <span class="number">3</span> );</div><div class="line">	<span class="keyword">var</span> normals = <span class="keyword">new</span> THREE.BufferAttribute( <span class="keyword">new</span> <span class="built_in">Float32Array</span>( vertexCount * <span class="number">3</span> ), <span class="number">3</span> );</div><div class="line">	<span class="keyword">var</span> uvs = <span class="keyword">new</span> THREE.BufferAttribute( <span class="keyword">new</span> <span class="built_in">Float32Array</span>( vertexCount * <span class="number">2</span> ), <span class="number">2</span> );</div><div class="line">	<span class="keyword">var</span> index = <span class="number">0</span>, vertices = [], normal = <span class="keyword">new</span> THREE.Vector3();</div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> y = <span class="number">0</span>; y &lt;= heightSegments; y ++ ) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> verticesRow = [];</div><div class="line"></div><div class="line">    <span class="keyword">var</span> v = (y)/ heightSegments;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> x = <span class="number">0</span>; x &lt;= widthSegments; x ++ ) &#123;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> u = (x) / widthSegments;</div><div class="line">      <span class="keyword">var</span> px = - radius * <span class="built_in">Math</span>.cos( phiStart + u * phiLength ) * <span class="built_in">Math</span>.sin( thetaStart + v * thetaLength );</div><div class="line">      <span class="keyword">var</span> py = radius * <span class="built_in">Math</span>.cos( thetaStart + v * thetaLength );</div><div class="line">      <span class="keyword">var</span> pz = radius * <span class="built_in">Math</span>.sin( phiStart + u * phiLength ) * <span class="built_in">Math</span>.sin( thetaStart + v * thetaLength );</div><div class="line">      normal.set( px, py, pz ).normalize();</div><div class="line">      positions.setXYZ( index, px, py, pz );</div><div class="line">      normals.setXYZ( index, normal.x, normal.y, normal.z );</div><div class="line">      <span class="comment">// change the uvs mapping method</span></div><div class="line">      uvs.setXY( index, <span class="number">1</span>-<span class="built_in">Math</span>.cos(u*<span class="built_in">Math</span>.PI*<span class="number">2</span>)*v*<span class="number">0.70710678118</span><span class="number">-1</span>/<span class="number">2</span>, <span class="number">1</span> -  <span class="built_in">Math</span>.sin(u*<span class="built_in">Math</span>.PI*<span class="number">2</span>)*v*<span class="number">0.70710678118</span><span class="number">-1</span>/<span class="number">2</span> );</div><div class="line">      verticesRow.push( index );</div><div class="line">      index ++;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    vertices.push( verticesRow );</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> indices = [];</div><div class="line"></div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> y = <span class="number">0</span>; y &lt; heightSegments; y ++ ) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> ( <span class="keyword">var</span> x = <span class="number">0</span>; x &lt; widthSegments; x ++ ) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">var</span> v1 = vertices[ y ][ x + <span class="number">1</span> ];</div><div class="line">			<span class="keyword">var</span> v2 = vertices[ y ][ x ];</div><div class="line">			<span class="keyword">var</span> v3 = vertices[ y + <span class="number">1</span> ][ x ];</div><div class="line">			<span class="keyword">var</span> v4 = vertices[ y + <span class="number">1</span> ][ x + <span class="number">1</span> ];</div><div class="line"></div><div class="line">			<span class="keyword">if</span> ( y !== <span class="number">0</span> || thetaStart &gt; <span class="number">0</span> ) indices.push( v1, v2, v4 );</div><div class="line">			<span class="keyword">if</span> ( y !== heightSegments - <span class="number">1</span> || thetaEnd &lt; <span class="built_in">Math</span>.PI ) indices.push( v2, v3, v4 );</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.setIndex( <span class="keyword">new</span> ( positions.count &gt; <span class="number">65535</span> ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, <span class="number">1</span> ) );</div><div class="line">	<span class="keyword">this</span>.addAttribute( <span class="string">'position'</span>, positions );</div><div class="line">	<span class="keyword">this</span>.addAttribute( <span class="string">'normal'</span>, normals );</div><div class="line">	<span class="keyword">this</span>.addAttribute( <span class="string">'uv'</span>, uvs );</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.boundingSphere = <span class="keyword">new</span> THREE.Sphere( <span class="keyword">new</span> THREE.Vector3(), radius );</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">THREE.SphereBufferGeometry.prototype = <span class="built_in">Object</span>.create( THREE.BufferGeometry.prototype );</div><div class="line">THREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://underbayan.github.io/tags/javascript/"/>
    
      <category term="THREEJS" scheme="https://underbayan.github.io/tags/THREEJS/"/>
    
  </entry>
  
</feed>
