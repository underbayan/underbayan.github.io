<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>underbayan.blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://underbayan.github.io/"/>
  <updated>2016-09-19T06:22:12.000Z</updated>
  <id>https://underbayan.github.io/</id>
  
  <author>
    <name>underbayan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://underbayan.github.io/2016/09/19/SVG-REACT-amazing-dashboard-created-by-hfs/"/>
    <id>https://underbayan.github.io/2016/09/19/SVG-REACT-amazing-dashboard-created-by-hfs/</id>
    <published>2016-09-19T06:22:12.000Z</published>
    <updated>2016-09-19T06:22:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>21312</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;21312&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css secret</title>
    <link href="https://underbayan.github.io/2016/08/11/css-secret/"/>
    <id>https://underbayan.github.io/2016/08/11/css-secret/</id>
    <published>2016-08-11T08:27:45.000Z</published>
    <updated>2016-08-11T08:58:22.000Z</updated>
    
    <content type="html"><![CDATA[
<style>
    .css_secret_block {
        width: 145px;
        height: 50px;
        border: 1px solid #333333;
        background: #335166;
        color: #fff;
        padding: 5px;
        word-break: break-all;
        word-wrap: break-word;
        line-height: 50px;
        display: inline-block;
        margin-top: 30px;
        margin-left: 30px;
        text-align: center;
    }
</style>

<!-- <h1>gradient demo</h1> -->
<div class="css_secret_block" style="background: linear-gradient(90deg,yellow,red);border-radius: 20px">90deg gradient
</div>
<div class="css_secret_block" style="background:#333333 linear-gradient(0deg,yellow,red);">0deg gradient
</div>
<div class="css_secret_block" style="background: linear-gradient(45deg,yellow,red);">45deg gradient
</div>
<div class="css_secret_block" style="background: linear-gradient(-45deg,yellow,red);">-45deg gradient
</div>
<div class="css_secret_block" style="background: linear-gradient(#fb3 ,#58a)">vertical</div>
<div class="css_secret_block" style="background: linear-gradient(#fb3  20%,#58a 80%)">20% 80%
</div>
<div class="css_secret_block" style="background: linear-gradient(#fb3  50%,#58a 50%)">50% 50%
</div>
<div class="css_secret_block" style="background: linear-gradient(#fb3  10%,#58a 10%)">10% 10%
</div>
<div class="css_secret_block" style="background: linear-gradient(#fb3  80%,#58a 90%) ">80% 90%
</div>
<div class="css_secret_block" style="background: linear-gradient(#fb3  80%,#58a 90%) no-repeat;background-size:100% 50%  ">80% 90% and no repeat
</div>
<div class="css_secret_block" style="background: linear-gradient(#fb3  30%,#58a 30%);background-size:100% 30px  ">50%
    50%
</div>
<div class="css_secret_block" style="background: linear-gradient(90deg ,#fb3 30%,#58a 0 ,#58a 30%,greenyellow 0,dodgerblue 10%);background-size:40px  100%  ">
    vertical
</div>
<div class="css_secret_block" style="background: linear-gradient(45deg,#fb3  25%,#58a 0,#58a 50%,#fb3 0,#fb3 75%,#58a 0);background-size:30px 30px  "></div>
<div class="css_secret_block" style="background: linear-gradient(45deg,#fb3  25%,#58a 0);background-size:30px 30px  "></div>
<div class="css_secret_block" style="background: #335166 linear-gradient(90deg,#fb3  1px,transparent 0);background-size:30px 30px  "></div>
<div class="css_secret_block" style="background: linear-gradient(-45deg,#fb3  25%,transparent 0,transparent 50%,#fb3 0,#fb3 75%,transparent 0),linear-gradient(45deg,transparent  25%,#58a 0,#58a 50%,transparent 0,transparent 75%,#58a 0) ;background-size:30px 30px  "></div>
<div class="css_secret_block" style="background: linear-gradient(-45deg,#fb3  25%,transparent 0,transparent 50%,#fb3 0,#fb3 75%,transparent 0) no-repeat ,linear-gradient(45deg,transparent  25%,#58a 0,#58a 50%,transparent 0,transparent 75%,#58a 0) no-repeat ;background-size:30px 30px ,60px 60px  "></div>
<div class="css_secret_block" style="background:#335166 radial-gradient( tan 30% ,transparent 0);background-size: 30px 30px"></div>
<!-- <h1>boxshadow and text shadow</h1> -->
<div class="css_secret_block" style="background:green;box-shadow: 0 5px 5px gray;">box-showdow
</div>
<div class="css_secret_block" style="background:green;text-shadow: 0 -2px 3px #335166;">text-showdow
</div>
<div class="css_secret_block" style="border-radius: 0.8em;box-shadow: 0 0 0 .6em #655;">box shadow
</div>
<div class="css_secret_block" style="height:30px;border-radius: 1.8em;border: solid .6em #655;">border occupy the
    content size
</div>
<div class="css_secret_block" style="margin-top:30px;background: green;box-shadow:0 0 0 10px darkgreen,0 0 0 15px deeppink,0 2px 5px  15px rgba(0,0,0,.6)">
    shadow wrap the border and innershadow
</div>
<!-- <h1>background</h1> -->
<!-- <p>use the shorthand wisely,shorthand will always give you the effect</p> -->
<div class="css_secret_block" style="background: url(&#39;http://cdn.code.baidu.com/imgs/angular.js.png&#39;)no-repeat top right rebeccapurple ">
    back ground align
</div>
<div class="css_secret_block" style="background-color: rebeccapurple;background:url(&#39;http://cdn.code.baidu.com/imgs/angular.js.png&#39;) bottom 20px left 10px ">
    postion identify with pixel length
</div>
<div class="css_secret_block" style="background-color: rebeccapurple;background:url(&#39;http://cdn.code.baidu.com/imgs/angular.js.png&#39;) bottom left / 450px 50px ;">
    identify the background size
</div>
<!-- <h1>border</h1> -->
<div class="css_secret_block" style="border-width: 10px 10px 0 10px ;box-shadow: 0 5px 5px gray;"></div>
<div class="css_secret_block" style="border-radius: 1.8em;border: solid .2em #655;">border
</div>
<!-- <p>by defalt the backgournd extend to the border  ,but  the img  also  influence the layout</p> -->
<div class="css_secret_block" style="background: url(&#39;http://cdn.code.baidu.com/imgs/angular.js.png&#39;)no-repeat top right rebeccapurple ;border: 10px dotted #ff0000"></div>
<div class="css_secret_block" style="background: url(&#39;http://cdn.code.baidu.com/imgs/angular.js.png&#39;)no-repeat  rebeccapurple ;border: 10px dotted #ff0000"></div>
<div class="css_secret_block" style="background: url(&#39;http://cdn.code.baidu.com/imgs/angular.js.png&#39;)no-repeat  rebeccapurple ;border: 10px dotted #ff0000;"></div>
<div class="css_secret_block" style="background-color: rebeccapurple;background:url(&#39;http://cdn.code.baidu.com/imgs/angular.js.png&#39;) bottom left / 250px 50px ;border: 10px dotted #ff0000"></div>
<!-- <p>using clip to make the backgorund not extend underneath the border</p> -->
<div class="css_secret_block" style="background: url(&#39;http://cdn.code.baidu.com/imgs/angular.js.png&#39;)no-repeat  rebeccapurple ;border: 10px dotted #ff0000;background-clip: padding-box"></div>
<!-- <p>using  the calc</p> -->
<div class="css_secret_block" style="background: lightseagreen url(&#39;./http://cdn.code.baidu.com/imgs/angular.js.png&#39;);background-position: calc(100% - 14px) calc(100% - 24px)"></div>
<!-- <h1>outline</h1> -->
<div class="css_secret_block" style="background: yellowgreen;border-radius: 15px;outline: 15px salmon solid;outline-offset: 3px"> outline not fit
    the border radius
</div>
<div class="css_secret_block" style="border-radius: 0.8em ;padding: 1em">outline will gets along with my rounds
</div>
<script>
    //you can use the modernizr tool  ,to judge the broser if suuport it by using @supports()
    //judge if the style  exist
    if ('testShadow' in document.documentElement.style) {
        document.documentElement.classList.add('textshadow')
    }
    //judge the property
    var dummy = document.createElement('p')
    dummy.style.backgroundImage = 'linear-gradient(red,tan)';
    if (dummy.style.backgroundImage)
        document.documentElement.classList.add('lineargradients')
</script>
<div class="css_secret_block" style="height:auto;line-height: 3;"><span>fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span>
</div>

]]></content>
    
    <summary type="html">
    
      
&lt;style&gt;
    .css_secret_block {
        width: 145px;
        height: 50px;
        border: 1px solid #333333;
        background: #335166;
    
    </summary>
    
    
      <category term="css3" scheme="https://underbayan.github.io/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>this</title>
    <link href="https://underbayan.github.io/2016/08/11/this/"/>
    <id>https://underbayan.github.io/2016/08/11/this/</id>
    <published>2016-08-11T08:26:05.000Z</published>
    <updated>2016-08-11T08:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<pre>javascript 的this 详解

this 的取值 取决于函数调用的模式

函数调用的模式一共有四种：

    方法调用模式

        形式：className.method()

        this：this的值为该class

    函数调用模式

        形式：functionName()

        this: 在js语言设计当中，这里的this的值是一个语言缺陷，this的值被设置为所处环境的全局变量，在浏览器中是windows，在nodejs中是global

              var A={}
              A.b=function(){
                  var c=function(){
                      console.log(this)};
                      c();
              }// 这里的this的值为 windows

              A.b=function(){
                  var that=this;
                  var c=function(){
                      console.log(that)};
                      c()；
              }//这里的值为A.b这个函数对象

              A.b=function(){
                var c=function(ar){
                    var d=function(ar){
                        console.log(this+ar)
                    };
                    d('d');
                    console.log(this+ar)
                };
                c('c');
            }
             //这里的两次this仍然是windows


    构造器调用模式

        形式：var newObjectName=new ClassName(); newObjectName.method()

        this：this的值绑定在新产生的对象上

    apply调用模式

        形式：method.apply(obj,arg)

        this：this的值绑定在obj上，arg为参数数组可以，可以作为method的函数的输入参数

什么时候我们需要使用this？

    在绝大数的情况下我们不使用this 关键字作为需要声明或者定义的属性的前缀。我们只有在需要引用函数或者对象中的属性的时候才会使用到this



</pre>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;javascript 的this 详解

this 的取值 取决于函数调用的模式

函数调用的模式一共有四种：

    方法调用模式

        形式：className.method()

        this：this的值为该class

    函数调
    
    </summary>
    
    
      <category term="javascript" scheme="https://underbayan.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>polar coodinates uvs mapping of ThreeJs SphereBufferGeometry</title>
    <link href="https://underbayan.github.io/2016/08/11/ThreeJs-SphereBufferGeometry-using-polar-coodinates-uvs-mapping/"/>
    <id>https://underbayan.github.io/2016/08/11/ThreeJs-SphereBufferGeometry-using-polar-coodinates-uvs-mapping/</id>
    <published>2016-08-11T05:24:40.000Z</published>
    <updated>2016-08-11T06:10:39.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">THREE.SphereBufferGeometry = <span class="function"><span class="keyword">function</span> (<span class="params"> radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength </span>) </span>&#123;</div><div class="line"></div><div class="line">	THREE.BufferGeometry.call( <span class="keyword">this</span> );</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.type = <span class="string">'SphereBufferGeometry'</span>;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.parameters = &#123;</div><div class="line">		radius: radius,</div><div class="line">		widthSegments: widthSegments,</div><div class="line">		heightSegments: heightSegments,</div><div class="line">		phiStart: phiStart,</div><div class="line">		phiLength: phiLength,</div><div class="line">		thetaStart: thetaStart,</div><div class="line">		thetaLength: thetaLength</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	radius = radius || <span class="number">50</span>;</div><div class="line"></div><div class="line">	widthSegments = <span class="built_in">Math</span>.max( <span class="number">3</span>, <span class="built_in">Math</span>.floor( widthSegments ) || <span class="number">8</span> );</div><div class="line">	heightSegments = <span class="built_in">Math</span>.max( <span class="number">2</span>, <span class="built_in">Math</span>.floor( heightSegments ) || <span class="number">6</span> );</div><div class="line"></div><div class="line">	phiStart = phiStart !== <span class="literal">undefined</span> ? phiStart : <span class="number">0</span>;</div><div class="line">	phiLength = phiLength !== <span class="literal">undefined</span> ? phiLength : <span class="built_in">Math</span>.PI * <span class="number">2</span>;</div><div class="line"></div><div class="line">	thetaStart = thetaStart !== <span class="literal">undefined</span> ? thetaStart : <span class="number">0</span>;</div><div class="line">	thetaLength = thetaLength !== <span class="literal">undefined</span> ? thetaLength : <span class="built_in">Math</span>.PI;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> thetaEnd = thetaStart + thetaLength;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> vertexCount = ( ( widthSegments + <span class="number">1</span> ) * ( heightSegments + <span class="number">1</span> ) );</div><div class="line"></div><div class="line">	<span class="keyword">var</span> positions = <span class="keyword">new</span> THREE.BufferAttribute( <span class="keyword">new</span> <span class="built_in">Float32Array</span>( vertexCount * <span class="number">3</span> ), <span class="number">3</span> );</div><div class="line">	<span class="keyword">var</span> normals = <span class="keyword">new</span> THREE.BufferAttribute( <span class="keyword">new</span> <span class="built_in">Float32Array</span>( vertexCount * <span class="number">3</span> ), <span class="number">3</span> );</div><div class="line">	<span class="keyword">var</span> uvs = <span class="keyword">new</span> THREE.BufferAttribute( <span class="keyword">new</span> <span class="built_in">Float32Array</span>( vertexCount * <span class="number">2</span> ), <span class="number">2</span> );</div><div class="line">	<span class="keyword">var</span> index = <span class="number">0</span>, vertices = [], normal = <span class="keyword">new</span> THREE.Vector3();</div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> y = <span class="number">0</span>; y &lt;= heightSegments; y ++ ) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> verticesRow = [];</div><div class="line"></div><div class="line">    <span class="keyword">var</span> v = (y)/ heightSegments;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> x = <span class="number">0</span>; x &lt;= widthSegments; x ++ ) &#123;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> u = (x) / widthSegments;</div><div class="line">      <span class="keyword">var</span> px = - radius * <span class="built_in">Math</span>.cos( phiStart + u * phiLength ) * <span class="built_in">Math</span>.sin( thetaStart + v * thetaLength );</div><div class="line">      <span class="keyword">var</span> py = radius * <span class="built_in">Math</span>.cos( thetaStart + v * thetaLength );</div><div class="line">      <span class="keyword">var</span> pz = radius * <span class="built_in">Math</span>.sin( phiStart + u * phiLength ) * <span class="built_in">Math</span>.sin( thetaStart + v * thetaLength );</div><div class="line">      normal.set( px, py, pz ).normalize();</div><div class="line">      positions.setXYZ( index, px, py, pz );</div><div class="line">      normals.setXYZ( index, normal.x, normal.y, normal.z );</div><div class="line">      <span class="comment">// change the uvs mapping method</span></div><div class="line">      uvs.setXY( index, <span class="number">1</span>-<span class="built_in">Math</span>.cos(u*<span class="built_in">Math</span>.PI*<span class="number">2</span>)*v*<span class="number">0.70710678118</span><span class="number">-1</span>/<span class="number">2</span>, <span class="number">1</span> -  <span class="built_in">Math</span>.sin(u*<span class="built_in">Math</span>.PI*<span class="number">2</span>)*v*<span class="number">0.70710678118</span><span class="number">-1</span>/<span class="number">2</span> );</div><div class="line">      verticesRow.push( index );</div><div class="line">      index ++;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    vertices.push( verticesRow );</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> indices = [];</div><div class="line"></div><div class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> y = <span class="number">0</span>; y &lt; heightSegments; y ++ ) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> ( <span class="keyword">var</span> x = <span class="number">0</span>; x &lt; widthSegments; x ++ ) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">var</span> v1 = vertices[ y ][ x + <span class="number">1</span> ];</div><div class="line">			<span class="keyword">var</span> v2 = vertices[ y ][ x ];</div><div class="line">			<span class="keyword">var</span> v3 = vertices[ y + <span class="number">1</span> ][ x ];</div><div class="line">			<span class="keyword">var</span> v4 = vertices[ y + <span class="number">1</span> ][ x + <span class="number">1</span> ];</div><div class="line"></div><div class="line">			<span class="keyword">if</span> ( y !== <span class="number">0</span> || thetaStart &gt; <span class="number">0</span> ) indices.push( v1, v2, v4 );</div><div class="line">			<span class="keyword">if</span> ( y !== heightSegments - <span class="number">1</span> || thetaEnd &lt; <span class="built_in">Math</span>.PI ) indices.push( v2, v3, v4 );</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.setIndex( <span class="keyword">new</span> ( positions.count &gt; <span class="number">65535</span> ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, <span class="number">1</span> ) );</div><div class="line">	<span class="keyword">this</span>.addAttribute( <span class="string">'position'</span>, positions );</div><div class="line">	<span class="keyword">this</span>.addAttribute( <span class="string">'normal'</span>, normals );</div><div class="line">	<span class="keyword">this</span>.addAttribute( <span class="string">'uv'</span>, uvs );</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.boundingSphere = <span class="keyword">new</span> THREE.Sphere( <span class="keyword">new</span> THREE.Vector3(), radius );</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">THREE.SphereBufferGeometry.prototype = <span class="built_in">Object</span>.create( THREE.BufferGeometry.prototype );</div><div class="line">THREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://underbayan.github.io/tags/javascript/"/>
    
      <category term="THREEJS" scheme="https://underbayan.github.io/tags/THREEJS/"/>
    
  </entry>
  
</feed>
